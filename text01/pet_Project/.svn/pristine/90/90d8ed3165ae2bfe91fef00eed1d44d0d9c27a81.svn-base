package com.qf.contorller;

import com.qf.entity.*;
import com.qf.service.IProductService;
import com.qf.util.StringUtil;
import com.baomidou.mybatisplus.plugins.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

@Controller
@RequestMapping("product")
public class ProductController {

    @Autowired
    IProductService productService;


    /**
     * 获取产品列表,分页，条件查询
     * @param page
     * @param map
     * @return
     */
    @RequestMapping("getPage")
    public String getPage(Page<Product> page, ModelMap map,Product product){

        productService.getProductPage(page,product);
        map.put("url","product/getPage");
        return "after/application/product/Productlist";
    }

    /**
     * 查询类型
     * @return
     */
    @RequestMapping("getType")
    public String getType(ModelMap map){
        List<Product> list = productService.getType();
        map.put("types",list);
        //System.out.println(list);
        return "after/application/product/addProduct";
    }

    /**
     * 上传产品
     * @param product
     * @param file
     * @param request
     * @return
     * @throws IOException
     */

    @RequestMapping("addProduct")
    @ResponseBody
    public ResultEntity<String> addProduct(Product product, MultipartFile file, HttpServletRequest request) throws IOException {

        String name = setFile(request, file);
        product.setPimage("upload/"+name);

        //添加产品
        int insert = productService.insert(product);
        if (insert>0){
            return ResultEntity.success_msg("添加成功");

        }else {
            return ResultEntity.failed_msg("添加失败");

        }

    }

    /**
     * 单个商品的删除
     * @param pid
     * @return
     */
    @ResponseBody
    @RequestMapping("delProduct")
    public ResultEntity<String> delProduct(Integer pid){
        int i = productService.deleteById(pid);
        if (i>0){
            return ResultEntity.success_msg("删除成功");

        }
        return ResultEntity.failed_msg("删除失败");
    }

    /**
     *产品信息回填
     * @param pid
     * @return
     */
    @RequestMapping("getProductById/{pid}")
    public String getProductById(@PathVariable Integer pid,ModelMap map){

        //查询单个产品信息
        Product product = productService.selectById(pid);
        map.put("product",product);
        //查询类型
        List<Product> list = productService.getType();
        map.put("types",list);
        return "after/application/product/updProduct";
    }

    /**
     * 编辑产品信息
     * @param product
     * @param file
     * @param request
     * @return
     */
    @RequestMapping("updProduct")
    @ResponseBody
    public ResultEntity<String> updProduct(Product product, MultipartFile file, HttpServletRequest request) throws IOException {
//        System.out.println(product);
        //获取文件名，并且保存文件
        String name = setFile(request, file);
        product.setPimage("upload/"+name);
        //进行修改操作
        int update = productService.update(product);
        if (update>0){
            return ResultEntity.success_msg("修改成功");

        }
        return ResultEntity.success_msg("修改失败");
    }

    /**
     * 批量删除
     * @param ids
     */
    @ResponseBody
    @RequestMapping("batchDel")
    public void batchDel(@RequestParam("ids[]") List<Integer> ids){

         productService.batchDel(ids);

    }

    /**
     * 拼接文件名
     * 保存文件到相应的路径
     * @param request
     * @param file
     * @return
     * @throws IOException
     */
    public String setFile(HttpServletRequest request,MultipartFile file) throws IOException {
        //获取本地Tomcat的路径
        String path = request.getSession().getServletContext().getRealPath("upload\\");
        String uuid=StringUtil.getUUID();

        File file2=new File(path);
        if (!file2.exists()) {//如果文件夹不存在就创建
            file2.mkdir();
        }
        //获取文件名称并且进行定义
        String filename = file.getOriginalFilename();//获取接收到的文件名
        String suffix = filename.substring(filename.lastIndexOf("."));//得到文件后缀
        //File.separator表示文件路径间的斜杠
        String name=path+File.separator+ uuid+suffix;

        //对文件进行保存copy方法需要两个参数（一个输入流，一个输出流）
        //把接收的文件读取进来，然后输出到name路径当中去
        FileCopyUtils.copy(file.getInputStream(),new FileOutputStream(name));

        return uuid+suffix;
    }

    /**
     * 获取产品名称
     * @return
     */
    @ResponseBody
    @RequestMapping("getProdutType")
    public List<Ptype> getProdutType(){
        //查询产品名称
        //List<Product> list=productService.getProdutName();
        List<Ptype> list = comSelect();
        //System.out.println(list);
        return list;
    }

    /**
     * 产品部分列表
     * @return
     */
    @RequestMapping("getProductList/{id}")
    public String getProductList(@PathVariable Integer id,ModelMap map){
//        System.out.println(id);
        List<Product> list = productService.getProductList(id);
        map.put("products",list);
        return "front/product";
    }

    /**
     * 根据id查询单个产品
     * @return
     */
    @RequestMapping("getProductDetails/{id}")
    public String getProductDetails(@PathVariable Integer id,ModelMap map){
//        System.out.println(id);
        Product product = productService.selectById(id);
        map.put("product",product);
        return "front/product_details";
    }

    /**
     * 公共的查询产品（部分）
     * @return
     */
    public List<Ptype> comSelect(){
        return productService.getProdutType();
    }

    /**
     * 根据id查询产品说明书
     * @return
     */
    @RequestMapping("getInstructions/{id}")
    public String getInstructions(@PathVariable Integer id,ModelMap map){
//        System.out.println(id);
        Product product = productService.selectById(id);
//        System.out.println(product);
        map.put("product",product);
        return "front/Intstructions";
    }

    @RequestMapping("jumpDiscuss/{pid}/{oid}")
    public String jumpDiscuss(@PathVariable Integer pid,@PathVariable Integer oid,ModelMap map){
//        System.out.println(pid);
//        System.out.println(oid);
        Product product = productService.selectById(pid);
//        System.out.println(product);
        map.put("product",product);
        map.put("oid",oid);
        return "front/discuss";
    }

    /**
     * 添加评价
     * @param discuss
     * @param file
     * @param request
     * @return
     * @throws IOException
     */

    @RequestMapping("addDiscuss")
    @ResponseBody
    public ResultEntity<String> addDiscuss(Discuss discuss, MultipartFile file, HttpServletRequest request) throws IOException {

        User user= (User) request.getSession().getAttribute("user");
//        System.out.println(user);
        discuss.setUid(user.getId());

        String name = setFile(request, file);
        discuss.setImage("upload/"+name);

//        System.out.println(discuss);
        //添加产品
//        Order order=productService.getOrder()
        int insert = productService.addDiscuss(discuss);
        int update = productService.updOstatus(discuss);
        if (insert>0 && update >0){
            return ResultEntity.success_msg("评价成功");

        }else {
            return ResultEntity.failed_msg("评价失败");

        }
    }

    @RequestMapping("getDiscuss/{id}")
    public String getDiscuss(Page<Discuss> page,@PathVariable Integer id,ModelMap map){
//        System.out.println(id);
       productService.getDiscuss(page,id);

//        for (Discuss d:disscussList){
//             System.out.println(d);
//        }
        map.put("url","product/getDiscuss/"+id);
        map.put("id",id);
        return "front/showDiscuss";
    }

    @RequestMapping("getDiscussImage/{id}")
    public String getDiscussImage(Page<Discuss> page,@PathVariable Integer id,ModelMap map){
        System.out.println(id);
        productService.getDiscussImage(page,id);

//        for (Discuss d:disscussList){
//            System.out.println(d);
//        }
        map.put("url","product/getDiscussImage/"+id);
        return "front/showDiscuss";
    }
}
